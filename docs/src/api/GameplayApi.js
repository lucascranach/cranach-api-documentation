/**
 * Tic Tac Toe
 * This API allows writing down marks on a Tic Tac Toe board and requesting the state of the board or of individual squares. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Mark from '../model/Mark';
import Status from '../model/Status';

/**
* Gameplay service.
* @module api/GameplayApi
* @version 1.0.0
*/
export default class GameplayApi {

    /**
    * Constructs a new GameplayApi. 
    * @alias module:api/GameplayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBoard operation.
     * @callback module:api/GameplayApi~getBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the whole board
     * Retrieves the current state of the board and the winner.
     * @param {module:api/GameplayApi~getBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    getBoard(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSquare operation.
     * @callback module:api/GameplayApi~getSquareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mark} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single board square
     * Retrieves the requested square.
     * @param {Object} row Board row (vertical coordinate)
     * @param {Object} column Board column (horizontal coordinate)
     * @param {module:api/GameplayApi~getSquareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mark}
     */
    getSquare(row, column, callback) {
      let postBody = null;
      // verify the required parameter 'row' is set
      if (row === undefined || row === null) {
        throw new Error("Missing the required parameter 'row' when calling getSquare");
      }
      // verify the required parameter 'column' is set
      if (column === undefined || column === null) {
        throw new Error("Missing the required parameter 'column' when calling getSquare");
      }

      let pathParams = {
        'row': row,
        'column': column
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = Mark;
      return this.apiClient.callApi(
        '/board/{row}/{column}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSquare operation.
     * @callback module:api/GameplayApi~putSquareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a single board square
     * Places a mark on the board and retrieves the whole board and the winner (if any).
     * @param {Object} row Board row (vertical coordinate)
     * @param {Object} column Board column (horizontal coordinate)
     * @param {Object} body 
     * @param {module:api/GameplayApi~putSquareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    putSquare(row, column, body, callback) {
      let postBody = body;
      // verify the required parameter 'row' is set
      if (row === undefined || row === null) {
        throw new Error("Missing the required parameter 'row' when calling putSquare");
      }
      // verify the required parameter 'column' is set
      if (column === undefined || column === null) {
        throw new Error("Missing the required parameter 'column' when calling putSquare");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putSquare");
      }

      let pathParams = {
        'row': row,
        'column': column
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/board/{row}/{column}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
